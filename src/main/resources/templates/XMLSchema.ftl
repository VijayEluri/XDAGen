<?xml version="1.0" encoding="UTF-8"?>
<schema targetNamespace="${targetNamespace}"
        xmlns:tns="${targetNamespace}"
        elementFormDefault="qualified"
        xmlns="http://www.w3.org/2001/XMLSchema" >
<!-- 
     This XMLSchema was auto-generated by ${generatingProgram}<#if generatedDate??>, ${generatedDate?datetime}</#if>.
--> 

<#list ospecs as ospec>
  <#assign el_name = ospec.rowElementName><#t>
  <#assign el_type_name = typeNamer.getRowElementTypeName(ospec.relationId)/><#t>
  <#assign list_el_name = ospec.rowCollectionElementName/><#t>
  <#assign list_el_type_name = typeNamer.getRowCollectionElementTypeName(ospec.relationId)/><#t>
  
  <#if !toplevelElRels.present || toplevelElRels.get?seq_contains(ospec.relationId)>
  <element name="${el_name}" type="tns:${el_type_name}"/>
  </#if>

  <complexType name="${el_type_name}">
    <sequence>
      <!-- fields -->
      <#list ospec.getOutputFields() as of> <#assign f = of.field/> <#assign field_el_name = of.outputElementName/> <#assign field_xs_simpletype = qgen.getXmlSchemaSimpleTypeForJdbcTypeCode(f.jdbcTypeCode)!>
      <#if field_xs_simpletype?has_content>
      <element name="${field_el_name}" type="${field_xs_simpletype}" minOccurs="<#if f.nullable>0<#else>1</#if>"/>
      <#else>
      <#if f.jdbcTypeCode == 2009>
      <element name="${field_el_name}">
        <complexType>
            <sequence>
                <any processContents="lax" minOccurs="0" maxOccurs="1"/>
            </sequence>
        </complexType>
      </element>
      <#else>
      <!-- WARNING: Field ${of.field.name} of database native type ${f.databaseType} has jdbc type code ${f.jdbcTypeCode}, which could not be mapped to an XML Schema type: field has been omitted. -->
      </#if>
      </#if>
      </#list>
      
      <!-- child elements -->
      <#list ospec.childOutputSpecs as c_ospec>
        <#if ospec.inlineChildCollections><#t>
      <element name="${c_ospec.rowElementName}" type="tns:${typeNamer.getRowElementTypeName(c_ospec.relationId)}" minOccurs="0" maxOccurs="unbounded"/>
        <#else><#t>
      <element name="${c_ospec.rowCollectionElementName}" type="tns:${typeNamer.getRowCollectionElementTypeName(c_ospec.relationId)}" minOccurs="${childElsOpt?string('0','1')}"/>
        </#if><#t>
      </#list>
      
      <!-- parent elements -->
      <#list ospec.parentOutputSpecs as p_ospec>
      <element name="${p_ospec.rowElementName}" type="tns:${typeNamer.getRowElementTypeName(p_ospec.relationId)}" minOccurs="${parentElsOpt?string('0','1')}"/>
      </#list>
    </sequence>
  </complexType>

  <#if !toplevelListElRels.present || toplevelListElRels.get?seq_contains(ospec.relationId)>
  <element name="${list_el_name}" type="tns:${list_el_type_name}"/>
  </#if>

  <complexType name="${list_el_type_name}">
    <sequence>
      <element name="${el_name}" type="tns:${el_type_name}"	minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  
</#list>
</schema>